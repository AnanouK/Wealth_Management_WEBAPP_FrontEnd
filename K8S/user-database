# Define a 'Service' To Expose MySQL to Other Services
apiVersion: v1
kind: Service
metadata:
  name: user-database
  labels:
    app: user-database
    tier: database
spec:
  ports:
    - port: 3306
      targetPort: 3306
  selector:
    app: user-database
    tier: database
  clusterIP: None # DNS is used, so clusterIP is not needed

---
  # Define a 'Persistent Volume Claim'(PVC) for MySQL Storage, dynamically provisioned by cluster
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim-user # name of PVC essential for identifying the storage data
  labels:
    app: user-database
    tier: database
spec:
  accessModes:
    - ReadWriteOnce   #This specifies the mode of the claim that we are trying to create.
  resources:
    requests:
      storage: 1Gi    #This will tell kubernetes about the amount of space we are trying to claim.

---
# Deployment specification begins here
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-database
  labels:
    app: user-database
    tier: database
spec:
  selector: # mySQL Pod Should contain same labels
    matchLabels:
      app: user-database
  strategy:
    type: Recreate
  template:
    metadata:
      labels: # Must match 'Service' and 'Deployment' selectors
        app: user-database
        tier: database
    spec:
      containers:
        - name: user-database
          image: mysql:latest
          imagePullPolicy: "Always"
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
            - name: MYSQL_DATABASE
              value: users
          ports:
            - containerPort: 3306
              name: user-database
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mysql-persistance-storage-user
      volumes:
        - name: mysql-persistance-storage-user
          persistentVolumeClaim:
            claimName: mysql-pv-claim-user